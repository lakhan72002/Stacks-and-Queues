Reverse first N elements of a given queue

Given a queue of integer elements and an integer k, your task is to reverse first k elements of the queue, leaving the other elements in same order.

Sample Input

2
4 2
1 2 3 4
5 3
10 20 30 40 50
Sample Output

2 1 3 4
30 20 10 40 50

-------------------------------------------------

#include<iostream>
#include<cstdio>
#include<cmath>
using namespace std;

class Queue{
  int *queue;
  int front;
  int rear;
  int capacity;
  public:
  	Queue(int size){
      this->capacity = size;
      queue = new int[size];
      front = 0;
      rear = 0;
    }
  	void enQueue(int data){
      if(rear == capacity){
        cout<<"Overflow\n";
        return;
      }
      queue[rear++] = data;
    }
 	int deQueue(){
    	if(front == rear){
      		return -1;
    	}
    	return queue[front++];
  	}
  	bool isEmpty(){
      return front == rear;
    }
  	int size(){
      return rear-front;
    }
};

// class Queue{
//   void enQueue(data);
//   int deQueue(data);
//   bool isEmpty();
// }
// The above class is used to declare the functions

void reverseKElementsQueue(Queue* queue,int k){
  // Write your code here
  int arr[k];
  for( int i = 0; i<k; i++ ){
    arr[i] = queue->deQueue();
  }
  Queue *q = new Queue(100);
  while( queue->isEmpty() == false ){
    q->enQueue( queue->deQueue() );
  }
  for( int i = k -1; i>=0; i-- ){
    queue->enQueue( arr[i] );
  }
  while( q->isEmpty() == false ){
    queue->enQueue( q->deQueue() );
  }
}

int main(){
  int t;
  cin>>t;
  while(t--){
    int n;
    cin>>n;
    int k;
    cin>>k;
    Queue *queue = new Queue(100);
    while(n--){
      int x;
      cin>>x;
      queue->enQueue(x);
    }
    reverseKElementsQueue(queue,k);
    while((n = queue->deQueue())!=-1)
      cout<<n<<' ';
    cout<<endl;
  }
}
