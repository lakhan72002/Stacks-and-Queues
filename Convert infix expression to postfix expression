Given an infix expression, convert the infix to postfix expression.

Sample Input

2
A*(B+C)/D
(A-(B+C))*D
Sample Output

ABC+*D/
ABC+-D*


---------------------------------------------------
#include<iostream>
#include<cstdio>
#include<cmath>
using namespace std;

#define SIZE 100

int Stack[SIZE], top=-1;

int isFull()
{
  return top==(SIZE-1);
}

int isEmpty()
{
  return top==-1;
}

// Function to add an item to stack.  It increases top by 1
int push(int item)
{
  if (isFull())
  {
    return -1;
  }
  Stack[++top] = item;
}

// Function to remove an item from stack.  It decreases top by 1
int pop()
{
  int temp;
  if (isEmpty())
  {
    return -1;
  }
  temp=Stack[top--];
  return temp;
}

/*
int Stack[SIZE], top=-1;
int isFull();
int isEmpty();
int push(int item);
int pop();
Above variables are used for Stack, SIZE and top and all are global variables. Also above push and pop functions are provided. */
bool check( char a, char b ){
  if( b == '#' ) return false;
    if( a == '(' ) return false;
    if( b == '(' ) return false;
    swap( a, b );
   // if( a == '' && b == '' ) return true;
    if( a == '+' and b == '+' ) return true;
    if( a == '+' and b == '-' ) return true;
    if( a == '+' && b == '*' ) return false;
    if( a == '+' && b == '^' ) return false;
    if( a == '-' && b == '+' ) return false;
    if( a == '-' && b == '-' ) return true;
    if( a == '-' && b == '*' ) return false;
    if( a == '-' && b == '^' ) return false;
    if( a == '*' && b == '+' ) return true;
    if( a == '*' && b == '-' ) return true;
     //if( a == '' && b == '' ) return true;
    if( a == '*' && b == '^' ) return false;
    if( a == '^' && b == '+' ) return true;
    if( a == '^' && b == '-' ) return true;
    if( a == '^' && b == '*' ) return true;
    if( a == '^' && b == '^' ) return true;
}
int infixToPostfix(char exp[], char output[])
{
 int i = 0, j = 0;
    int c  = '#';
    push(c);
    while( exp[i] != '\0' ){
        if( exp[i] >= 'a' and exp[i] <= 'z' ){
            output[j++] = exp[i];
        }
        else if( exp[i] >= 'A' and exp[i] <= 'Z' ) 
            output[j++] = exp[i];
        else if( exp[i] == ')' ){
            char ch = pop();
            while( ch != '(' ){
                output[j++] = ch;
                ch = pop();
            }
        }
        else{
            char ch = pop();
            if( check( exp[i], ch ) ) {
                while( check( exp[i], ch ) ){
                    output[j++] = ch;
                    ch = pop();
                }
                push(ch);
                push(exp[i]);
            }
            else{
                push(ch);
                push(exp[i]);
            }
        }
        i++;
    }
    char ch = pop();
    while( !isEmpty() and ch != '#' ){
        output[j++] = ch;
        ch = pop();
    }
  	output[j] = '\0';
}

int main()
{
  int n;
  char *exp, input[100], output[100];
  cin>>n;
  exp = input;
  while(n--)
  {
    cin>>exp;
    infixToPostfix(exp, output);
    cout<<output<<endl;
  }
  return 0;
}
